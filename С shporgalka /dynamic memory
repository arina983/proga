1. malloc (Memory Allocation)

Описание:
malloc выделяет блок памяти указанного размера в байтах.
Память не инициализируется (содержит "мусор").
Возвращает указатель на начало выделенного блока памяти.

Синтаксис:
void *malloc(size_t size);

Пример:
int *arr = (int *)malloc(10 * sizeof(int)); // Выделяем память для 10 целых чисел
if (arr == NULL) {
    printf("Ошибка выделения памяти!\n");
    return 1;
}

Когда использовать:
Когда нужно выделить память для массива или структуры.
Когда не требуется инициализация памяти.

2. calloc (Cleared Allocation)

Описание:
calloc выделяет память для массива элементов и инициализирует её нулями.
Память очищается (все байты устанавливаются в 0).
Возвращает указатель на начало выделенного блока памяти.

Синтаксис:
void *calloc(size_t num, size_t size);

Пример: 
int *arr = (int *)calloc(10, sizeof(int)); // Выделяем память для 10 целых чисел, инициализированных нулями
if (arr == NULL) {
    printf("Ошибка выделения памяти!\n");
    return 1;
}

Когда использовать:
Когда нужно выделить память для массива и гарантировать, что она будет инициализирована нулями.
Полезно для работы с массивами, где важно начальное нулевое состояние.

3. realloc (Reallocation)

Описание:
realloc изменяет размер ранее выделенного блока памяти.
Если новый размер больше старого, дополнительные байты не инициализируются.
Если новый размер меньше старого, лишняя память освобождается.
Возвращает указатель на новый блок памяти (может быть другим, чем исходный).

Синтаксис:
void *realloc(void *ptr, size_t size);

Пример:
int *arr = (int *)malloc(10 * sizeof(int)); // Выделяем память для 10 целых чисел
if (arr == NULL) {
    printf("Ошибка выделения памяти!\n");
    return 1;
}
arr = (int *)realloc(arr, 20 * sizeof(int)); // Увеличиваем размер до 20 целых чисел
if (arr == NULL) {
    printf("Ошибка перевыделения памяти!\n");
    return 1;
}
Когда использовать:

Когда нужно изменить размер уже выделенного блока памяти (например, увеличить или уменьшить массив).
Полезно для динамических структур данных, таких как динамические массивы.

4. free (Освобождение памяти)

Описание:
free освобождает память, ранее выделенную с помощью malloc, calloc или realloc.
После вызова free указатель становится недействительным (dangling pointer).

Синтаксис:
void free(void *ptr);

Пример: 
int *arr = (int *)malloc(10 * sizeof(int));
if (arr == NULL) {
    printf("Ошибка выделения памяти!\n");
    return 1;
}
// Используем память
free(arr); // Освобождаем память
arr = NULL; // Хорошая практика: обнуляем указатель после освобождения
Когда использовать:
Когда выделенная память больше не нужна.

Всегда освобождайте память, чтобы избежать утечек.

Итог:
malloc — базовый способ выделения памяти.
calloc — выделение с инициализацией нулями.
realloc — изменение размера выделенного блока.
free — освобождение памяти.
